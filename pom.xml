<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="
           http://maven.apache.org/POM/4.0.0
           http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.multigroup</groupId>
  <artifactId>multigroup-webapp</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>multigroup-webapp Maven Webapp</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <!-- Para permitir JSP sin web.xml -->
    <failOnMissingWebXml>false</failOnMissingWebXml>

    <!-- Versión de JasperReports Library -->
    <jasperreports.version>6.20.0</jasperreports.version>
  </properties>

  <dependencies>
    <!-- Jakarta Servlet API (Tomcat 10), scope provided -->
    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <version>6.0.0</version>
      <scope>provided</scope>
    </dependency>

    <!-- JSTL para Jakarta EE 10 -->
    <dependency>
      <groupId>jakarta.servlet.jsp.jstl</groupId>
      <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
      <version>3.0.1</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.web</groupId>
      <artifactId>jakarta.servlet.jsp.jstl</artifactId>
      <version>3.0.1</version>
    </dependency>

    <!-- Conector MySQL -->
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <version>9.3.0</version>
    </dependency>

    <!-- JasperReports Library -->
    <dependency>
      <groupId>net.sf.jasperreports</groupId>
      <artifactId>jasperreports</artifactId>
      <version>${jasperreports.version}</version>
    </dependency>

    <!-- BCrypt para hashing de contraseñas -->
    <dependency>
      <groupId>org.mindrot</groupId>
      <artifactId>jbcrypt</artifactId>
      <version>0.4</version>
    </dependency>

    <!-- JUnit para tests -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <!-- Nombre final del WAR -->
    <finalName>multigroup-webapp</finalName>

    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
          <configuration>
            <source>${maven.compiler.source}</source>
            <target>${maven.compiler.target}</target>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- 1) Plugin para compilar código Java (incluye nuestra clase ReportCompiler) -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.0</version>
        <configuration>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
        </configuration>
      </plugin>

      <!-- 2) Plugin TOMCAT/EQUIVALENTE si lo necesitas (opcional) -->
      <!-- Ejemplo de Tomcat7 plugin, sólo si deseas hacer mvn tomcat7:run -->
      <!--
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>tomcat7-maven-plugin</artifactId>
        <version>2.2</version>
        <configuration>
          <path>/</path>
          <port>8080</port>
        </configuration>
      </plugin>
      -->

      <!-- 3) Plugin exec-maven-plugin: invoca a ReportCompiler en generate-resources -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>compile-jrxml</id>
            <!-- Se ejecuta después de compilar clases, en process-classes -->
            <phase>process-classes</phase>
            <goals>
              <goal>java</goal>
            </goals>
            <configuration>
              <!-- Clase que compila todos los .jrxml -->
              <mainClass>com.multigroup.utils.ReportCompiler</mainClass>
              <!-- Usamos compile porque queremos que tome target/classes + dependencias -->
              <classpathScope>compile</classpathScope>
            </configuration>
          </execution>

        </executions>
      </plugin>

      <!-- 4) Plugin WAR para empaquetar el proyecto -->
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.2.2</version>
        <configuration>
          <failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
      </plugin>
    </plugins>

    <!-- 5) Copiar los .jasper generados a WEB-INF/reports/ -->
    <resources>
      <resource>
        <!-- Los .jasper se generan en target/classes/reports/ -->
        <directory>${project.build.outputDirectory}/reports</directory>
        <includes>
          <include>**/*.jasper</include>
        </includes>
        <!-- Dentro del WAR, irán a WEB-INF/reports/ -->
        <targetPath>WEB-INF/reports</targetPath>
      </resource>
    </resources>
  </build>
</project>
